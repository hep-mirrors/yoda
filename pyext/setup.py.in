#! /usr/bin/env python

from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
from glob import glob
from template import make_templates

PKGNAME = 'yoda'

## Extension definition
import os.path
incdir = os.path.abspath('@top_srcdir@/include')
srcdir = os.path.abspath('@top_srcdir@/src')
libdir = os.path.abspath("@top_builddir@/src/.libs")

statics = os.path.join('yoda', 'errors.cpp')

# A helper function (since we have two modules now...)
def ext(name, depends=[], statics=[]):
    return Extension(
        '%s.%s' % (PKGNAME, name),
        ['%s/%s.pyx' % (PKGNAME, name)] + statics,
        language='c++',
        depends=depends,
        include_dirs=[incdir, PKGNAME],
        extra_compile_args= "-I@prefix@/include @BOOST_CPPFLAGS@ @PYEXT_CXXFLAGS@".split(),
        library_dirs=[libdir],
        extra_link_args = ["-L@prefix@/lib"],
        libraries=['stdc++', 'YODA'])


# Make the templates
make_templates('Axis1D_BIN1D_DBN',
               dict(DBN='Dbn2D', BIN1D='ProfileBin1D'),
               dict(DBN='Dbn1D', BIN1D='HistoBin1D'))

make_templates('Axis2D_BIN2D_DBN',
               dict(DBN='Dbn3D', BIN2D='ProfileBin2D'),
               dict(DBN='Dbn2D', BIN2D='HistoBin2D'))

make_templates('Bin1D_DBN', DBN=('Dbn1D', 'Dbn2D'))
make_templates('Bin2D_DBN', DBN=('Dbn2D', 'Dbn3D'))

header_files = glob('../include/YODA/*.h') + glob('../include/YODA/Utils/*.h')

extns = [ext('util'),
         ext('core', statics=[statics], depends=glob('yoda/include/*.pyx') + header_files)]

setup(name = PKGNAME,
      ext_modules = extns,
      cmdclass = dict(build_ext=build_ext),
      packages = [PKGNAME])
