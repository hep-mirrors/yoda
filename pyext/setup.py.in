#! /usr/bin/env python

from distutils.core import setup
from distutils.extension import Extension
from glob import glob

## Extension definition
import os.path
incdir = os.path.abspath("@top_srcdir@/include")
srcdir = os.path.abspath("@top_srcdir@/src")
libdir = os.path.abspath("@top_builddir@/src/.libs")
static_files = ["yoda/errors.cpp"]

BASE_COMPILE_ARGS = "@PYEXT_CXXFLAGS@ -I@prefix@/include -I../include".split()
BASE_LINK_ARGS = ["-L@prefix@/lib"]

# Dependencies used to trigger rebuild
header_files = glob("../include/YODA/*.h") + glob("../include/YODA/Utils/*.h")
core_depends = glob("yoda/include/*.pyx") + glob("yoda/*.py") + header_files

## A helper function (since we have two modules now...)
def ext(name, depends=[], statics=[], extra_compile_args=[], extra_link_args=[]):
    return Extension(
        "yoda.%s" % name,
        ["yoda/%s.cpp" % name] + statics,
        language="C++",
        depends=depends,
        include_dirs=[incdir, "yoda"],
        extra_compile_args=BASE_COMPILE_ARGS + extra_compile_args,
        library_dirs=[libdir],
        extra_link_args = BASE_LINK_ARGS + extra_link_args,
        libraries=["stdc++", "YODA"])

extns = [ext("util"),  ext("core", statics=static_files, depends=core_depends)]

## Enable building of ROOT extension if ROOT is present
if os.environ.has_key("BUILD_ROOTCOMPAT"):
    try:
        # import ROOT
        # TODO: Need to test for and use root-config in configure
        root_ext = ext("rootcompat", depends=core_depends,
                       extra_compile_args="@ROOT_CXXFLAGS@".split(),
                       extra_link_args= """@ROOT_LDFLAGS@ @ROOT_LIBS@ -lPyROOT""".split())
        extns.append(root_ext)
    except:
        pass

setup(name="yoda",
      version="@PACKAGE_VERSION@",
      ext_modules=extns,
      packages=["yoda"])
