#! /usr/bin/env python

## Read command line
import sys, os
assert len(sys.argv) > 1
INFILES = sys.argv[1:]


def mk_mpl_arrays_1d(ao):
    "Get data points and errors in array formats usable by matplotlib's plotting functions"
    ## Convert the 1D AO to a 2D scatter
    s = ao.mkScatter(usestddev=True)
    # TODO: Detect if bins aren't contiguous and indicate the gap in the plot somehow
    xs, ys, exs, eys, sigys = [], [], [], [], []
    step_xs, step_ys = [], []
    for p in s.points:
        xs.append(p.x)
        exs.append(p.xErrs)
        ys.append(p.y)
        eys.append(p.yErrs)
        step_xs += [p.xMin, p.xMax]
        step_ys += [p.y, p.y]
    exs, eys = zip(*exs), zip(*eys) #< Transpose err arrays
    return xs, exs, ys, eys, step_xs, step_ys


def plot_ao_1d(ao, name=None, usefocus=False, usestddev=False, style="point", errs=True, marker="o", color="black"):
    "Plotting function for general 1D AOs, via Scatter2D"
    if not name:
        name = ao.path.replace("/", "_").strip("_")

    ## Get arrays of plotting coordinates
    xs, exs, ys, eys, step_xs, step_ys = mk_mpl_arrays_1d(ao)

    ## Plot
    import pylab as pl
    pl.clf()
    pl.hold(True)
    #
    ## Step plot, with optional errs
    if style == "step":
        pl.plot(step_xs, step_ys, marker="None", drawstyle="steps-post", color=color)
        if errs:
            pl.errorbar(xs, ys, yerr=sigys, marker="None", ls="None", color=color, markeredgecolor=color, capsize=0, ecolor=color)
    ## Data point plot with x and y errs
    elif style == "point":
        if errs:
            pl.errorbar(xs, ys, xerr=exs, yerr=eys, marker=marker, color=color, markeredgecolor=color, ls="None", ecolor=color)
        else:
            pl.errorbar(xs, ys, marker=marker, color=color, markeredgecolor=color, ls="None")
    #
    # pl.errorbar(xs, ys, xerr=exs, yerr=eys, marker="o", color="black", ls="None", ecolor="red")
    # pl.plot(xs, ys, "o", color="black")
    #
    #pl.title(os.path.basename(ao.path))
    pl.xlabel(ao.annotation("XLabel"))
    pl.ylabel(ao.annotation("YLabel"))
    pl.savefig(name + ".pdf")
    #pl.savefig(name + ".png")


## Load a profile histo
import yoda
for infile in INFILES:
    aos = yoda.read(infile)
    for ao in aos.values():
        # assert type(ao) is yoda.Profile1D
        name = os.path.basename(infile).replace(".yoda", "_") + ao.path.replace("/", "_").strip("_")
        print "Plotting", name
        plot_ao_1d(ao, name)
