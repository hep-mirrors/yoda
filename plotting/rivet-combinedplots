#! /usr/bin/env python

"""\
rivet-combinedplots - generate plots using different histograms

USAGE:
 rivet-combinedplots [options] yodafile1/analysis1/histogram1[:'PlotOption1=Value':'PlotOption2=Value'] [path/to/yodafile2 ...]

where the plot options are described in the make-plots manual in the HISTOGRAM
section.
"""

import rivet, yoda, sys, os, yaml
rivet.util.check_python_version()
rivet.util.set_process_name(os.path.basename(__file__))


class Plot(dict):
    "A tiny Plot object to help writing out the head in the .dat file"
    def __repr__(self):
        return "# BEGIN PLOT\n" + "\n".join("%s=%s" % (k,v) for k,v in self.iteritems()) + "\n# END PLOT\n\n"


def sanitiseString(s):
    #s = s.replace('_','\\_')
    #s = s.replace('^','\\^{}')
    #s = s.replace('$','\\$')
    s = s.replace('#','\\#')
    s = s.replace('%','\\%')
    s = s.replace('/','_')
    return s


def getCommandLineOptions():
    "Parse command line options"
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage=__doc__)

    parser.add_option("-i", dest="INPUT", default=[],
                        help="additional file(s) to configure combinations.")
    parser.add_option('-o', '--outdir', dest='OUTDIR',
                      default='./plots/', help='write data files into this directory')

    parser.add_option('--plotinfodir', dest='PLOTINFODIRS', action='append',
                      default=['.'], help='directory which may contain plot header information (in addition '
                      'to standard Rivet search paths)')
    parser.add_option('--html', action="store_true", dest='HTML',
                      default=False, help='create html site with plots')
    parser.add_option("-n", "--num-threads", metavar="NUMTHREADS", dest="NUMTHREADS", type=int,
                  default=1, help="run make-plots on a specific number of threads. Only in combination with --html")

    stygroup = OptionGroup(parser, "Plot style")
    # # stygroup.add_option("--refid", dest="REF_ID",
    # #                     default="REF", help="ID of reference data set (file path for non-REF data)")
    stygroup.add_option("--linear", action="store_true", dest="LINEAR",
                        default=False, help="plot with linear scale")
    stygroup.add_option("--mc-errs", action="store_true", dest="MC_ERRS",
                        default=False, help="show vertical error bars on the MC lines")
    stygroup.add_option("--no-ratio", action="store_false", dest="RATIO",
                         default=True, help="disable the ratio plot")
    # stygroup.add_option("--rel-ratio", action="store_true", dest="RATIO_DEVIATION",
    #                     default=False, help="show the ratio plots scaled to the ref error")
    stygroup.add_option("--no-plottitle", action="store_true", dest="NOPLOTTITLE",
                        default=False, help="don't show the plot title on the plot "
                        "(useful when the plot description should only be given in a caption)")
    stygroup.add_option("--style", dest="STYLE", default="default",
                        help="change plotting style: default|bw|talk")
    stygroup.add_option("-c", "--config", dest="CONFIGFILES", action="append", default=["~/.make-plots"],
                        help="additional plot config file(s). Settings will be included in the output configuration.")
    parser.add_option_group(stygroup)

    return parser


def getMCHistos(files):
    """Loop over all input files. Only use first occurrence in each MC file for every MC-histogram."""
    mchistos = {}
    for infile in files:
        mchistos.setdefault(infile, {})
        analysisobjects = yoda.readYODA(infile)
        for path, ao in analysisobjects.iteritems():
            if not mchistos[infile].has_key(path):
                mchistos[infile][path] = ao
    return mchistos


def getRivetRefData(refhistos, anas=None):
    "Find all Rivet reference data files"
    rivet_data_dirs = rivet.getAnalysisRefPaths()
    dirlist = []
    for d in rivet_data_dirs:
        if anas is None:
            import glob
            dirlist.append(glob.glob(os.path.join(d, '*.yoda')))
        else:
            dirlist.append([os.path.join(d, a+'.yoda') for a in anas])
    for files in dirlist:
        for infile in files:
            analysisobjects = yoda.readYODA(infile)
            for path, ao in analysisobjects.iteritems():
                if path.startswith('/REF/'):
                    if not refhistos.has_key(path):
                        refhistos[path] = ao

def splitFullPath(FullHistoPath):
    "splits the full path to histogram into path to yoda and histogram path in yoda file. assumption: split at next-to-last"
    pathsplit = FullHistoPath.split(r"/")
    histoname = "/"+"/".join(pathsplit[-2:])
    filename = "/".join(pathsplit[:-2])
    return filename, histoname

def parseArgs(args):
    """Look at the argument list and split it at colons, in order to separate
    the file names from the plotting options. Store the file names and
    file specific plotting options."""
    Plots = []
    for a in args:
        asplit = a.split('|')

        # parse plot information
        PlotString = asplit[0]
        PlotName    = PlotString.split(":")[0]
        PlotOptions = PlotString.split(":")[1:]
        Plots.append({
            'PlotName'   :PlotName, # must be unique, because it also serves as filename
            'PlotOptions':PlotOptions,
            'Histos':[]
        })

        # parse histogram information 
        HistoStrings = asplit[1:]
        for string in HistoStrings:
            histsplit = string.split(":")
            FullPath = histsplit[0] # structure: $PATH_TO_FILE/ANALYSIS/HISTOGRAM
            HistoOptions = histsplit[1:]

            # find title for histogram
            has_title = False
            for option in HistoOptions:
                ## Add 'Title' if there is no = sign before math mode
                if not '=' in option or ('$' in option and option.index('$') < option.index('=')):
                    option = 'Title=%s' % option
                if option.startswith('Title='):
                    has_title = True
            if not has_title:
                HistoOptions.append('Title=%s' % sanitiseString(" ".join(FullPath.split('/')[-3:-1]))) 

            # add dict to list of plots
            FileName, pathToPlot = splitFullPath(FullPath)
            Plots[-1]['Histos'].append({
                "FileName"  :FileName,
                "pathToPlot":pathToPlot,
                "options":HistoOptions
            })
    return Plots

def setStyle(ao, style):
    """Set default plot styles (color and line width) colors borrowed from Google Ngrams"""
    LINECOLORS = ['{[HTML]{EE3311}}',  # red (Google uses 'DC3912')
                  '{[HTML]{3366FF}}',  # blue
                  '{[HTML]{109618}}',  # green
                  '{[HTML]{FF9900}}',  # orange... weirdly this screws up if the F is lower-case!
                  '{[HTML]{990099}}']  # lilac
    LINESTYLES = ['solid',
                  'dashed',
                  'dashdotted',
                  'dotted']

    if opts.STYLE == 'talk':
        ao.setAnnotation('LineWidth', '1pt')
    if opts.STYLE == 'bw':
        LINECOLORS = ['black!90',
                      'black!50',
                      'black!30']

    c = style % len(LINECOLORS)
    s = style / len(LINECOLORS)

    ao.setAnnotation('LineStyle', '%s' % LINESTYLES[s])
    ao.setAnnotation('LineColor', '%s' % LINECOLORS[c])


def setOptions(ao, options):
    "Set arbitrary annotations"
    for opt in options:
        key, val = opt.split('=', 1)
        ao.setAnnotation(key, val)


def mkoutdir(outdir):
    "Function to make output directories"
    if not os.path.exists(outdir):
        try:
            os.makedirs(outdir)
        except:
            msg = "Can't make output directory '%s'" % outdir
            raise Exception(msg)
    if not os.access(outdir, os.W_OK):
        msg = "Can't write to output directory '%s'" % outdir
        raise Exception(msg)

def writeOutput(output, h):
    "Choose output file name and dir"
    outdir = opts.OUTDIR
    outfile = '%s.dat' % h.replace('/', "_")
    mkoutdir(outdir)
    outfilepath = os.path.join(outdir, outfile)
    f = open(outfilepath, 'w')
    f.write(output)
    f.close()
    return outfile

def writeHTMLpage(opts, filenames):
    ## Write web page containing all (matched) plots
    ## Make web pages first so that we can load it locally in
    ## a browser to view the output before all plots are made
    style = '''<style>
      html { font-family: sans-serif; }
      img { border: 0; }
      a { text-decoration: none; font-weight: bold; }
    </style>
    '''

    ## Include MathJax configuration
    script = '''\
    <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [["$","$"]]}
    });
    </script>
    <script type="text/javascript"
      src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
    '''

    ## A helper function for metadata LaTeX -> HTML conversion
    from rivet.util import htmlify

    ## A timestamp HTML fragment to be used on each page:
    import datetime
    timestamp = '<p>Generated at %s</p>\n' % datetime.datetime.now().strftime("%A, %d. %B %Y %I:%M%p")

    index = open(os.path.join(opts.OUTDIR, "index.html"), "w")
    index.write('<html>\n<head>\n<title>Combined plots from Rivet analyses</title>\n%s</head>\n<body>' % (style + script))
    index.write('<h2>Combined plots from Rivet analyses</h2>\n\n')
    index.write('<div style="float:none; overflow:auto; width:100%">\n')
    for srcfile in sorted(filenames):
        filename = os.path.basename(srcfile).replace(".dat", "")
        pngfile = filename+".png"
        # vecfile = filename+"."+opts.VECTORFORMAT.lower()
        vecfile = filename+".pdf"
        index.write('  <div style="float:left; font-size:smaller; font-weight:bold;">\n')
        # anchor with link to dat file
        index.write('    <a href="#%s">&#9875;</a><a href="%s">&#8984</a> %s:<br/>\n' %
                       (filename, srcfile, filename) )
        index.write('    <a name="%s"><a href="%s">\n' % (filename, vecfile) )
        index.write('      <img style="min-width:250px;" src="%s">\n' % pngfile )
        index.write('    </a></a>\n')
        index.write('  </div>\n')
    index.write('</div>\n')


    index.write('<br>%s</body>\n</html>' % timestamp)
    index.close()

def makePlots(opts, filenames):
    ## Run make-plots on all generated .dat files
    # sys.exit(0)
    from subprocess import Popen, PIPE
    mp_cmd = ["make-plots"]
    if not opts.NUMTHREADS == 1:
        mp_cmd += " --num-threads=", opts.NUMTHREADS
    mp_cmd.append("--pdfpng")
    for file in filenames:
        mp_cmd.append(opts.OUTDIR + file + ".dat")
    Popen(mp_cmd).wait()

#--------------------------------------------------------------------------------------------

if __name__ == '__main__':

    ## Command line parsing
    parser = getCommandLineOptions()
    opts, args = parser.parse_args()

    ## Split the input file names and the associated plotting options
    ## given on the command line list of plots represented by dicts
    plots = parseArgs(args)

    # build list of histogram names for all plots from plotlist 
    histograms = []
    for plot in plots:
        for histo in plot['Histos']:
            histograms.append(histo)

    # build list of file names for all plots from plotlist 
    files = [histodict['FileName'] for histodict in histograms]
    files = list(set(files)) # ensure every entry is unique

    # build list of all outputfilenames
    outputfilenames = [plot['PlotName'] for plot in plots]

    ## Create a list of all available histograms
    mchistos = getMCHistos(files)

    ## Read the .plot files
    plotdirs = opts.PLOTINFODIRS + [os.path.abspath(os.path.dirname(f)) for f in files]
    plotparser = rivet.mkStdPlotParser(plotdirs, opts.CONFIGFILES)

    ## Now loop over all plots and build them
    for plotdict in plots:

        ## Plot object for the PLOT section in the .dat file
        plot = Plot()
        plot['Legend'] = '1'
        plot['LogY'] = '1'
        plotoptions = plotdict['PlotOptions']

        # TODO: what exactly does plotparser.getHeader expect?
        for key, val in plotparser.getHeaders(plotdict['Histos'][0]['pathToPlot']).iteritems():
            plot[key] = val

        if opts.LINEAR:
            plot['LogY'] = '0'
        if opts.NOPLOTTITLE:
            plot['Title'] = ''

        if opts.STYLE == 'talk':
            plot['PlotSize'] = '8,6'
        elif opts.STYLE == 'bw':
            if opts.RATIO:
                plot['RatioPlotErrorBandColor'] = 'black!10'

        ## DrawOnly is needed to keep the order in the Legend equal to the
        ## order of the files on the command line
        drawonly = []

        ## Loop over histos
        outputname = plotdict['PlotName']
        styleidx = 0
        ratioreference = None
        anaobjects = []
        for histo in plotdict['Histos']:
            infile = histo['FileName']
            h = histo['pathToPlot']
            if mchistos.has_key(infile) and mchistos[infile].has_key(h):
                ## Default linecolor, linestyle
                setStyle(mchistos[infile][h], styleidx)
                styleidx += 1
                if opts.MC_ERRS:
                    mchistos[infile][h].setAnnotation('ErrorBars', '1')
                ## Plot defaults from .plot files
                for key, val in plotparser.getHistogramOptions(h).iteritems():
                    mchistos[infile][h].setAnnotation(key, val)
                ## Command line plot options
                setOptions(mchistos[infile][h], histo['options'])
                mchistos[infile][h].setAnnotation('Path', infile + h)
                anaobjects.append(mchistos[infile][h])
                drawonly.append(infile + h)
                if opts.RATIO and ratioreference is None:
                    ratioreference = infile + h

        plot['DrawOnly'] = ' '.join(drawonly).strip()
        if opts.RATIO and len(drawonly) > 1:
            plot['RatioPlot'] = '1'
            plot['RatioPlotReference'] = ratioreference

        output = ''
        output += str(plot)

        ## Special
        special = plotparser.getSpecial(h)
        if special:
            output += "\n"
            output += "# BEGIN SPECIAL %s\n" % h
            output += special
            output += "# END SPECIAL\n\n"

        from cStringIO import StringIO
        sio = StringIO()
        yoda.writeFLAT(anaobjects, sio)
        output += sio.getvalue()

        ## Write everything into a file
        filename = writeOutput(output, outputname)
        
    if opts.HTML:
        writeHTMLpage(opts, outputfilenames)
        makePlots(opts, outputfilenames)
