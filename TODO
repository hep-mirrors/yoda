YODA TODO list
==============

NOW

* Check if the weight2 treatment in Dbn1D is really correct: we're currently
  multiplying it by sign(w). Hmm. (AB)

* Rebinning: merges of n adjacent bins
  (on widths or on bin groups?) (AB for 1D)
  MK for 2D: done

* Rebinning: global rebinning by integer factor(s) (AB for 1D, MICHAL for 2D)

* Remove the "using namespace std" from the Bin2D.h and Axis2D.h headers: you
  should avoid publicly using namespaces in API headers since it pollutes the
  global namespace for any users of the API. (done) (MICHAL)

* Completely hide the Bin2D::isReal from public view: this is absolutely an
  internal implementation detail and should not be public in any way. I'm also
  not the only person to think that real/imaginary are *very* confusing terms
  for this, given that they have a very different and more familiar meaning to
  all of us: can better names be chosen? "Ghost bins" with an _isGhost()
  internal should be enough. Hopefully there's no need to invent a term for
  non-ghost bins, since that is just covered by !_isGhost()... (MICHAL)
  MK: Done

* Similarly, is there any reason to expose the isGriddy function publicly on
  Axis2D and Histo1D? Can't it just be a private _isGrid()? (MICHAL)
  MK: Done

* Add copy constructors for Dbn1D/2D, Scatter2D, Histo/ProfileBin1D, Point2D/3D, HistoBin2D.
  Rule of three: also need explicit assignment operator= for all classes
  with copy constructors? (ANDY and MICHAL for respectively authored classes)

* Conversion functions to build Histo1D and Profile1D objects for slicings and
  marginalisations along both X and Y directions of 2D histos. Throw an
  exception if binnings are not complete grids. (MICHAL)
  MK: done -- to be reviewed.
  AB: Profile1D slices still needed. If outflows now work on Histo2D, they
  should be included in these slicings.

* Implement hierarchy-cascading state-setting constructor for Histo2D. (MICHAL)
  MK: done
  AB: You still need to add state-setting for the total dbn and the outflows: at
  the moment this only sets the state on the Bin2Ds.
  MK: Done

* Use state-setting constructors for Histo and Profile persistency via the
  Reader classes. (HH)

* New "flat" file format: adapt WriterYODA and fill ReaderYODA. (HH)
  Need to persist the whole-histo Dbn1D/Dbn2Ds, and over/underflows.



NEXT

* Tests:
  Add bin-comparison and negative-weighted mean test(s)
  Test bin-by-index sorted behaviour on Histo and Profile

* Use Weights objects in Dbn1D / Dbn2D (AB)

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)

* Transform differential to integral histos and vice versa. Bins have to be
  contiguous? (AB)

* Multiple errors on Scatter2D -- via a vector of Error2D? How to implement
  flexible error combination? Error correlations? (DANIEL)

* Perhaps ProfileBin1D would be better if it contained a Dbn1D rather than two
  Dbn2Ds, since the over/underflow now *are* Dbn2Ds... (AB)

* Test that a y-binned Histo2D has the same per-y-column stats as an
  equivalently x-binned Profile1D. Perhaps use this as an opportunity to
  implement one of the the conversion functions mentioned in the NEXT
  section...
  AB: Actually, doing this really properly requires a whole set of "outflow"
  bins. Let's postpone the exact equality check until this is done, although
  "partial" profile and 1D histo slicing can be done before then.

* Profile2D & Dbn3D

* WriterFlat and ReaderFlat, for Scatter2D representations only. (HH)

* Arbitrary function transforms on Scatters



AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Explicitly return NaN for profile histo points with no weight? Or throw LowStatsError?

* Terminal histos via WriterTerminal

* Bin division with binomial correlation (Efficiency1D)

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)


PERSISTENCY

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? The
  latter looks awesome...

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?
