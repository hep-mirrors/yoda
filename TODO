YODA TODO list
==============

* Use boost
  Sort out collection iterator args: use Boost::Range

* Store an overall Dbn1D in Histo1D (and profile?) rather than overflow and
  underflow. Remove the bin type enum.

* Histo1D::integral() -- either calc from histo-level Dbn1D or from bins.

* Rename Exception.h -> Exceptions.h, Util.h -> Utils.h

* Sort axis contents (lazily)... allow arbitrary bins, but ensure that there is
  no bin edge overlap.

* Use inline functions... excluding them was a misunderstanding/red herring.

* SWIG-generated Python -> yoda/core.py, with yoda/__init__.py containing "from
  yoda.core import *". Then rest of package can contain hand-written Python
  niceties.

* Book histos and profiles:
  - from Scatter
  - from each other (via temp Scatter?)
  - by log and linear scale divisions
  - explicitly from vector
  - ???

* Add scaleX, scaleY, scaleXY to Scatter2D. Arbitrary function transforms on Scatters?

* Implement histo/histo -> scatter, profile/profile -> scatter and
  scatter/scatter -> scatter. Also multiplication?

* Allow setting of all weight moments on bins and histos for persistency loading

* Store a type name string on each type, to ease dynamic_casts when loading from
  persistency.

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?

* Get height measure "right" for log binning
  Really? Or ditch "height"? Have to be careful with Jacobian factors.

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Explicitly return NaN for profile histo points with no weight.

* Write scripts to convert between data formats and to plot results.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?

* Does Writer hierarchy make sense?
   Yes, for plugins...
