YODA TODO list
==============

NOW

* Write / support comments on ends of YODA format data lines
   Ignore anything after "#" on data lines -- use this to write convenience
   height & error info for each bin since not obvious from sumWX2 etc.

* Add nice constructor behaviour and docstrings to the Scatter2D Python interface. (AB)

* Remove nasty Cython shims (DM)
   Does inheritance work automatically in Cython now?

* Complete basic Histo2D and Profile2D functionality. (AB)
   Axis2D is working

* Make Python interface test scripts (DM)

* Add copy assignment to Point/Scatter3D and Dbn1D/2D. (AB)

* Improve tests Makefile setup to work out the path to the Python build dir. (AB)




NEXT

* Add "official" counter and bar-chart types (AB)
   Need better names!

* Add a merge() method in Bin2D. Add a constructor that takes Dbns.

* Rebinning: global rebinning of Axis2D -> Histo2D by integer factor(s) --
  different factors in x and y directions.

* Automatically determine input and output formats (= readers/writers) from file extn.

* Test negative- and mixed-weighted stat calculations, and scaling.

* Test gap handling on 1D and 2D axes.

* Add Histo2D binning constructors from Scatter3D and Profile2D.

* Add Scatter1D/Point1D (AB)

* Transform 1D differential to integral histos and vice versa.
  Bins have to be contiguous. (AB)

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)

* Multiple errors on Scatter2D -- via a vector of Error2D? How to implement
  flexible error combination? Error correlations?

* WriterFlat and ReaderFlat, for Scatter2D representations only. (HH)

* Arbitrary function transforms on Scatters (AB)

* Optionally configurable ROOT writer.



AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Terminal histos via WriterAsciiArt

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? Protobuf?
  The latter two look awesome...
