YODA TODO list
==============

NOW

* Remove non-const bin access from Histos and Profiles
   cf. David D's point re. consistency via email on 7/8/2012

* Auto-determine input and output formats (= readers/writers) from file extn (AB)

* Add Axis2D -> Histo2D/Profile2D bin adding and erasing. (AB)
   Adding 2D operator support and bin-adding/erasing

* Make Python interface test scripts (DM,AB)
   Test Histo2D and Scatter2D from Python

* Add copy assignment to both C++ and Cython (AB)

* Docstrings for Points, Dbns and Bins (AB)

* Add stdErr to HistoBinXD (AB)

* WriterFlat, for Scatter2D representations only. (HH)

* Transform 1D differential to integral histos and vice versa.
   Bins have to be contiguous. Scatter -> Scatter, and Histo1D -> Scatter (AB)



NEXT

* ROOT analysis type converter functions
   In YODA/ROOTCnv.h -- pure header library to avoid bild-time ROOT dependence

* Optionally configurable ROOT writer.

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)
   "Binning"/"axis" option on arbitrary types, particularly strings? ->
   generalised bar charts. Make counter a pure sumW, sumW2 object and use it in
   implementation of Dbn1D/2D.

* Generalise/expose Axis*D for binning of general objects, e.g. "binned histos"

* 2D bin merging and rebinning (AB)
   Only rebin perfect grids: need to detect them. Global rebinning of Axis2D ->
   Histo2D by generally different integer factors in x and y directions.

* Test negative- and mixed-weighted stat calculations, and scaling.

* Test gap handling on 1D and 2D axes.

* Add Histo2D binning constructors from Scatter3D and Profile2D.

* Add Scatter1D/Point1D (AB)

* "BinnedValues" type: use Axis behaviour to look up fixed values without Dbn "history".



AND AFTER THAT...

* Integer axis

* Read Plot sections in YODA format (HH)
   Use this in implementing the make-plots replacement.

* ReaderFlat -> Scatter2D

* Allow comments on ends of YODA format data lines in ReaderYODA (HH)
   Ignore anything after "#" on data lines -- use this to write convenience
   height & error info for each bin since not obvious from sumWX2 etc.

* Multi-error support on Point types
   Access by index, with negative (enum) indices for quad/linear/largest combn?

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Terminal histos via WriterAsciiArt

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? Protobuf?
  The latter two look awesome...
