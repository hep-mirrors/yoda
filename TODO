YODA TODO list
==============


NOW


* Remove YAML

* Remove templated scatter stuff

* Hide inappropriate classes from Doxygen, and upgrade Doxyfile

* Use boost foreach etc.
  Sort out collection iterator args: use Boost::Range
  Add lexical_cast support to annotation get and set functions
  Provide for persistency from containers of pointers to AOs and Boost::any

* Scatter2D:

  Scatter2D s;
  s.addPoint(0.2, 0.2, 0.1, 0.1, 0.03, 0.05);
  s.addPoint(Point2D(0.4, 0.3, 0.1, 0.1));
  /// @todo How to represent multiple errors? Point2D has a vector of Error2D. Don't assume any combination rules
  s.addPoints(pointvector);

  Scatter2D s2(h1d);

* Convert DPS output to use interim Scatter construction



* Make Bins type into a sorted_vector contained on Axis, with built-in caching
  (remove binHash and cachedBinEdges).
  Fill overall and under/overflow Dbn1Ds in Histo1D and Profile1D.
  Add bin-comparison and negative-weighted mean test(s)
  Histo1D::integral() -- either calc from histo-level Dbn1D or from bins.

* Axis -> Axis1D

* Be explicit about x and y variables on ProfileBin -- it's not clear that
  "stdErr" etc. refer to the y direction.



* Read back from flat format

* Rebinning -- base global rebin on merges of n adjacent bins (via iterator ranges)

* Terminal histos via WriterTerminal


NEXT

* Book histos and profiles:
  - from Scatter
  - from each other (via temp Scatter?)
  - by log and linear scale divisions
  - explicitly from vector
  - ???


* Axis::scale -> scaleX, scaleY, scaleXY to Scatter2D. Arbitrary function transforms on Scatters?

* Implement histo/histo -> scatter, profile/profile -> scatter and
  scatter/scatter -> scatter. Also multiplication?

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?

* Get height measure "right" for log binning
  Really? Or ditch "height"? Have to be careful with Jacobian factors.

* Explicitly return NaN for profile histo points with no weight (workaround?).

* Write scripts to convert between data formats and to plot results.

* Add a named Weights object, allowing named or vectorised fills? Autoconversion to/from double.



PERSISTENCY

* Look into pickling of C++ interfaced classes.

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?

* Does Writer hierarchy make sense?
   Yes, for plugins... but let's emphasise non-IO operation first
