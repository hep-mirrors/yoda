YODA TODO list
==============

NOW

* Histo2D & Dbn2D: add Python interface mapping. (MICHAL) (done, compilation is
  fine, not tested yet, though)
  AB: is this done? Remove the TODO item when you're completely happy (and have
  checked that it's ok -- email the yoda@projects list and we'll take a look).

* Move micro-functions to be inline in the headers for HistoBin2D.cc, Bin1D.cc,
  and probably some others.

* Remove getBinHash from Axis2D and use private bin hash member for equality
  comparisons (MICHAL)
  AB: Is this done?

* Implement hierarchy-cascading state-setting constructor for Histo2D. (MICHAL)

* Use state-setting constructors for Histo and Profile persistency via the
  Reader classes. (HH)

* Test that a y-binned Histo2D has the same per-y-column stats as an
  equivalently x-binned Profile1D. Perhaps use this as an opportunity to
  implement one of the the conversion functions mentioned in the NEXT
  section... (MICHAL)

* Conversion functions to build Histo1D and Profile1D objects for slicings and
  marginalisations along both X and Y directions of 2D histos. Throw an
  exception if binnings are not complete grids. (MICHAL)
  (done -- to be reviewed)

* Rebinning: merges of n adjacent bins and global rebinning by integer factor
  (on widths or on bin groups?) (AB for 1D, MICHAL for 2D)

* New "flat" file format: adapt WriterYODA and fill ReaderYODA. (HH)
  Need to persist the whole-histo Dbn1D/Dbn2Ds, and over/underflows.



NEXT

* Use Weights objects in Dbn1D / Dbn2D (AB)

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)

* Profile2D & Dbn3D

* Multiple errors on Scatter2D -- via a vector of Error2D? How to implement
  flexible error combination?  (DANIEL)

* WriterFlat and ReaderFlat, for Scatter2D representations only. (HH)

* Perhaps ProfileBin1D would be better if it contained a Dbn1D rather than two
  Dbn2Ds, since the over/underflow now *are* Dbn2Ds...

* Error correlations?

* Tests:
  Add bin-comparison and negative-weighted mean test(s)
  Test bin-by-index sorted behaviour on Histo and Profile

* Arbitrary function transforms on Scatters

* Transform differential to integral histos and vice versa. Bins have to be
  contiguous? (AB)



AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Explicitly return NaN for profile histo points with no weight? Or throw LowStatsError?

* Terminal histos via WriterTerminal

* Bin division with binomial correlation (Efficiency1D)

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)


PERSISTENCY

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? The
  latter looks awesome...

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?
