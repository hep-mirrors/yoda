YODA TODO list
==============

NOW

* Provide for persistency from containers of pointers to AOs and Boost::any

* Be explicit about x and y variables on ProfileBin -- it's not clear that
  "stdErr" etc. refer to the y direction.
  Bin -> Bin1D, etc.

* Fill and use overall and under/overflow Dbn1Ds in Histo1D and Profile1D.

* Make Bins type into a sorted_vector contained on Axis, with built-in caching
  (remove binHash and cachedBinEdges).

* Tests:
  Add bin-comparison and negative-weighted mean test(s)
  Test bin-by-index sorted behaviour on Histo and Profile


* Histo1D::integral() -- either calc from histo-level Dbn1D or from bin index/iterator ranges.

* Read Scatters from AIDA DPS

* Book histos and profiles:
  - from Scatter
  - from each other (via temp Scatter?)

* Axis::scale -> scaleX, scaleY, scaleXY to Scatter2D.

* Arbitrary function transforms on Scatters

* Scatter2D s2(h1d)?

* Implement histo/histo -> scatter, profile/profile -> scatter and
  scatter/scatter -> scatter. Also multiplication?

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?



NEXT

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Multiple errors on Scatter2D via a vector of Error2D. Combination rule enum arg (QUAD, LIN) on error() method

* Persist whole-histo Dbn1D

* Read back from flat format

* Rebinning:
  merge of 2 adjacent bins
  merges of n adjacent bins (via iterator ranges)
  global rebinning by integer factor (on widths or on bin groups?)

* Explicitly return NaN for profile histo points with no weight? Or throw LowStatsError?

* Terminal histos via WriterTerminal

* Bin division with binomial correlation (Efficiency1D)

* Write scripts to convert between data formats and to plot results.

* Add a named Weights object, allowing named or vectorised fills? Autoconversion to/from double.



PERSISTENCY

* Look into pickling of C++ interfaced classes. WriterS10n

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?
