YODA TODO list
==============

NOW

* Read Plot sections (HH)
   DM to use this in implementing the make-plots replacement.

* Allow comments on ends of YODA format data lines in ReaderYODA (HH)
   Ignore anything after "#" on data lines -- use this to write convenience
   height & error info for each bin since not obvious from sumWX2 etc.

* Remove non-const bin access from Histos and Profiles?
   cf. David D's point re. consistency via email on 7/8/2012

* Add Axis2D -> Histo2D/Profile2D bin adding and erasing. (AB)

* Make Python interface test scripts (DM)

* Add copy assignment to both C++ and Cython (AB)

* Docstrings for Points, Dbns and Bins (AB)

* Reintroduce missing docstrings (DM)

* Add stdErr to HistoBinXD (AB)

* Test Histo2D and Scatter2D from Python (AB)

* Adding 2D operator support and bin-adding/erasing



NEXT

* Auto-determine input and output formats (= readers/writers) from file extn (AB)

* Improve tests Makefile setup to work out the path to the Python build dir. (AB)

* Add a merge() method in Bin2D. Add a constructor that takes Dbns (AB)
   Use merge() to implement merging/rebinning in Axis2D -> Histo2D & Profile2D.

* Detecting perfect/imperfect 2D grids (AB)

* 2D bin merging and rebinning (AB)
   Only rebin perfect grids? Global rebinning of Axis2D -> Histo2D by generally
   different integer factors in x and y directions.

* Test negative- and mixed-weighted stat calculations, and scaling.

* Test gap handling on 1D and 2D axes.

* Add Histo2D binning constructors from Scatter3D and Profile2D.

* Add Scatter1D/Point1D (AB)

* Transform 1D differential to integral histos and vice versa.
   Bins have to be contiguous. (AB)

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)
   "Binning"/"axis" option on arbitrary types, particularly strings? ->
   generalised bar charts.

* "BinnedValues" type: use Axis behaviour to look up fixed values.

* Multiple errors on Scatters -- via a vector of Errors?
   Flexible error combination? Error correlations? Max/min?

* WriterFlat and ReaderFlat, for Scatter2D representations only. (HH)

* Arbitrary function transforms on Scatters (AB)

* Optionally configurable ROOT writer.



AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Terminal histos via WriterAsciiArt

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? Protobuf?
  The latter two look awesome...
