YODA TODO list
==============

NOW

* Make Bins type into a sorted_vector contained on Axis, with built-in caching (remove binHash and cachedBinEdges).

* Axis::scale

* Rename Exception.h -> Exceptions.h, Util.h -> Utils.h

* Fill overall and under/overflow Dbn1Ds in Histo1D and Profile1D.

* Use boost foreach etc.
  Sort out collection iterator args: use Boost::Range

* Use inline functions... excluding them was a misunderstanding/red herring.

* Histo1D::integral() -- either calc from histo-level Dbn1D or from bins.



NEXT

* Book histos and profiles:
  - from Scatter
  - from each other (via temp Scatter?)
  - by log and linear scale divisions
  - explicitly from vector
  - ???

* Add scaleX, scaleY, scaleXY to Scatter2D. Arbitrary function transforms on Scatters?

* Implement histo/histo -> scatter, profile/profile -> scatter and
  scatter/scatter -> scatter. Also multiplication?

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?

* Get height measure "right" for log binning
  Really? Or ditch "height"? Have to be careful with Jacobian factors.

* Explicitly return NaN for profile histo points with no weight (workaround?).

* Write scripts to convert between data formats and to plot results.

* Add a named Weights object, allowing named or vectorised fills? Autoconversion to/from double.



PERSISTENCY

* Look into pickling of C++ interfaced classes.

* Allow setting of all weight moments on bins and histos for persistency loading

* Store a type name string on each type, to ease dynamic_casts when loading from
  persistency.

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?

* Does Writer hierarchy make sense?
   Yes, for plugins... but let's emphasise non-IO operation first
